// Generated by CoffeeScript 1.6.3
(function() {
  var testInfo;

  testInfo = {
    name: 'init',
    tags: ['midway']
  };

  require("../common/setup");

  describe("init specs " + env.TEST_ENV_DESC, function() {
    var allPassed, browser, sync, wrap, _ref;
    this.timeout(env.TIMEOUT);
    _ref = {}, browser = _ref.browser, sync = _ref.sync;
    allPassed = true;
    wrap = wdSync.wrap({
      "with": (function() {
        return browser;
      })
    });
    before(function() {
      var _ref1;
      _ref1 = wdSync.remote(env.REMOTE_CONFIG), browser = _ref1.browser, sync = _ref1.sync;
      browser.on("status", function(info) {
        return console.log("\u001b[36m%s\u001b[0m", info);
      });
      return browser.on("command", function(meth, path) {
        return console.log(" > \u001b[33m%s\u001b[0m: %s", meth, path);
      });
    });
    afterEach(function() {
      return allPassed = allPassed && (this.currentTest.state === 'passed');
    });
    after(wrap(function() {
      this.quit();
      if (env.SAUCE) {
        return this.sauceJobStatus(allPassed);
      }
    }));
    it("browser.status", wrap(function() {
      return this.status().should.exist;
    }));
    return describe("init", function() {
      before(wrap(function() {
        return this.init(desiredWithTestInfo(testInfo));
      }));
      return it("browser.sessionCapabilities", wrap(function() {
        var capabilities;
        capabilities = this.sessionCapabilities();
        capabilities.should.exist;
        capabilities.browserName.should.exist;
        return capabilities.platform.should.exist;
      }));
    });
  });

}).call(this);
